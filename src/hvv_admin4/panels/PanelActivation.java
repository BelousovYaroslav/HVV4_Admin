/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hvv_admin4.panels;

import hvv_admin4.HVV_Admin4;
import hvv_admin4.HVV_Admin4Constants;
import hvv_admin4.dialogs.DlgBigStopWatch;
import static hvv_admin4.panels.PanelDegasation.logger;
import hvv_admin4.steps.info.TechProcessDegasationStepInfo;
import hvv_admin4.steps.info.TechProcessHFInfo;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.LinkedList;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.Timer;
import org.apache.log4j.Logger;

/**
 *
 * @author yaroslav
 */
public class PanelActivation extends javax.swing.JPanel {
    final HVV_Admin4 theApp;
    static Logger logger = Logger.getLogger(PanelActivation.class);
    public LinkedList m_lstProgram;
    PanelActivationProgress m_pnlProgress;
    final DlgBigStopWatch m_dlgBigStopWatch;
    
    /**
     * Creates new form PanelProcess
     */
    public PanelActivation( HVV_Admin4 app) {
        theApp = app;
        
        initComponents();
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice defaultScreen = ge.getDefaultScreenDevice();
        Rectangle rect = defaultScreen.getDefaultConfiguration().getBounds();    
        m_dlgBigStopWatch = new DlgBigStopWatch( app, null, false);
        
        int nY = 0;
        if( theApp.GetSelectedArm() == HVV_Admin4Constants.ARM3 ||
            theApp.GetSelectedArm() == HVV_Admin4Constants.ARM4)
                    nY = m_dlgBigStopWatch.getHeight();
        m_dlgBigStopWatch.setLocation( rect.width - m_dlgBigStopWatch.getWidth(), nY);
        
        
        //m_pParent.m_dlgInd1 = new TechProcessStep08_1_Dlg( theApp, null/*theApp.m_pMainWnd*/, false, m_nInductor, m_pParent);
        
        
        m_pnlProgress = new PanelActivationProgress( theApp, this);
        pnlProgress.add( m_pnlProgress);
        m_pnlProgress.setBounds( 2, 2, 595, 444);
        m_pnlProgress.setVisible( true);
        
        /*
        radGetterType1.setSelected( true);
        radGetterType2.setSelected( true);
        
        radInductorType1.setSelected(true);
        radInductorType2.setSelected(true);
        */
        m_dlgBigStopWatch.lblInductor.setText( "ИНД1");
        
        m_lstProgram = new LinkedList();
        new Timer( 100, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Timer t = ( Timer) e.getSource();
                t.stop();
                defineProgram();
            }
        }).start();
        
        /*
        new Timer( 500, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                Timer t = ( Timer) e.getSource();
                t.stop();
                m_pnlProgress.edtTrailingTime.invalidate();
                m_pnlProgress.edtTrailingPower.invalidate();
                m_pnlProgress.btnAddStep.invalidate();
                m_pnlProgress.btnAddTrailingSteps.invalidate();
            }
        }).start();
        */
        
        m_scrollBar.setMaximum( 1320 - 280 - 15);
        m_scrollBar.setValue( 0);
    }

    public void Init() {
        if( theApp.GetProcessedDeviceType() == HVV_Admin4Constants.DEVICE_SMALL) {
            radInductorType1.setEnabled( false);
            radInductorType2.setSelected( true);
            m_dlgBigStopWatch.lblInductor.setText( "ИНД2");
        }
        else if( theApp.GetProcessedDeviceType() == HVV_Admin4Constants.DEVICE_MEDIUM) {
            
        }
        else {
            
        }
        
        defineProgram();
        
        btnNext.setEnabled( false);
        new  Timer( 1000, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                (( Timer) e.getSource()).stop();
                btnNext.setEnabled( true);
            }
        }).start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();
        lblGetterType = new javax.swing.JLabel();
        radGetterType2 = new javax.swing.JRadioButton();
        radGetterType1 = new javax.swing.JRadioButton();
        lblInductorType = new javax.swing.JLabel();
        radInductorType2 = new javax.swing.JRadioButton();
        radInductorType1 = new javax.swing.JRadioButton();
        pnlProgress = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        m_scrollBar = new javax.swing.JScrollBar();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 200)));
        setMaximumSize(new java.awt.Dimension(640, 440));
        setMinimumSize(new java.awt.Dimension(640, 440));
        setPreferredSize(new java.awt.Dimension(640, 440));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        setLayout(null);

        lblTitle.setFont(new java.awt.Font("Cantarell", 0, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblTitle.setText("<html><u>9.2 Активация рабочих геттеров</u></thml>");
        lblTitle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        add(lblTitle);
        lblTitle.setBounds(10, 10, 620, 40);

        btnNext.setText("C т а р т");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        add(btnNext);
        btnNext.setBounds(10, 380, 620, 50);

        lblGetterType.setText("<html>Тип геттера:</html>");
        lblGetterType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        add(lblGetterType);
        lblGetterType.setBounds(530, 90, 100, 20);

        buttonGroup1.add(radGetterType2);
        radGetterType2.setSelected(true);
        radGetterType2.setText("2");
        radGetterType2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        radGetterType2.setBorderPainted(true);
        radGetterType2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        radGetterType2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        radGetterType2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGetterType2ActionPerformed(evt);
            }
        });
        add(radGetterType2);
        radGetterType2.setBounds(580, 120, 50, 20);

        buttonGroup1.add(radGetterType1);
        radGetterType1.setText("1");
        radGetterType1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        radGetterType1.setBorderPainted(true);
        radGetterType1.setEnabled(false);
        radGetterType1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radGetterType1ActionPerformed(evt);
            }
        });
        add(radGetterType1);
        radGetterType1.setBounds(530, 120, 50, 20);

        lblInductorType.setText("<html>Тип индуктора:</html>");
        lblInductorType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        add(lblInductorType);
        lblInductorType.setBounds(530, 230, 100, 40);

        buttonGroup2.add(radInductorType2);
        radInductorType2.setText("2");
        radInductorType2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        radInductorType2.setBorderPainted(true);
        radInductorType2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        radInductorType2.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        radInductorType2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radInductorType2ActionPerformed(evt);
            }
        });
        add(radInductorType2);
        radInductorType2.setBounds(580, 280, 50, 20);

        buttonGroup2.add(radInductorType1);
        radInductorType1.setSelected(true);
        radInductorType1.setText("1");
        radInductorType1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        radInductorType1.setBorderPainted(true);
        radInductorType1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radInductorType1ActionPerformed(evt);
            }
        });
        add(radInductorType1);
        radInductorType1.setBounds(530, 280, 50, 20);

        pnlProgress.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        pnlProgress.setLayout(null);
        add(pnlProgress);
        pnlProgress.setBounds(10, 90, 480, 280);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("P выброса");
        jLabel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        add(jLabel3);
        jLabel3.setBounds(280, 60, 210, 20);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Длительность");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        add(jLabel4);
        jLabel4.setBounds(40, 60, 110, 20);

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Мощность");
        jLabel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(220, 220, 220)));
        add(jLabel5);
        jLabel5.setBounds(170, 60, 90, 20);

        m_scrollBar.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                m_scrollBarAdjustmentValueChanged(evt);
            }
        });
        add(m_scrollBar);
        m_scrollBar.setBounds(500, 90, 20, 280);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        if( m_pnlProgress.m_nStep == -1) {
            //мы нажали "старт"
            
            TechProcessHFInfo info = new TechProcessHFInfo( theApp);
            info.SetStartDateAsCurrent();
            theApp.SaveStepInfo( "162", info, true);
            
            lblGetterType.setEnabled( false);
            radGetterType1.setEnabled( false);
            radGetterType2.setEnabled( false);
            
            lblInductorType.setEnabled( false);
            radInductorType1.setEnabled( false);
            radInductorType2.setEnabled( false);
            
            m_pnlProgress.m_nStep = 0;
            if( theApp.GetSettings().GetDebugShortenProgTimes())
                m_pnlProgress.m_nStepSecondsLeft = ( ( TechProcessDegasationStepInfo) m_lstProgram.getFirst()).GetDuration() * 5;
            else
                m_pnlProgress.m_nStepSecondsLeft = ( ( TechProcessDegasationStepInfo) m_lstProgram.getFirst()).GetDuration() * 60;
            
            m_pnlProgress.m_nFlashSeconds = 4;
            
            btnNext.setText( "Далее");
            btnNext.setEnabled( false);
        }
        else {
            //мы нажали "далее"
            if( m_pnlProgress.m_bTrailingAdded) {
                if( m_pnlProgress.m_nStep == m_lstProgram.size()) {
                    //конец программы
                    
                    TechProcessHFInfo info = ( TechProcessHFInfo) theApp.GetStepInfo( "162");
                    info.SetStopDateAsCurrent();
                    
                    if( radGetterType1.isSelected())
                    info.SetGetter( HVV_Admin4Constants.GETTER1);
                    else
                        info.SetGetter( HVV_Admin4Constants.GETTER2);

                    if( radInductorType1.isSelected())
                        info.SetGetter( HVV_Admin4Constants.INDUCTOR_TYPE1);
                    else
                        info.SetGetter( HVV_Admin4Constants.INDUCTOR_TYPE2);
                
                    info.m_lstProgram = new LinkedList();


                    JTextField [] m_StepsPM = { m_pnlProgress.edtStep1MaxPressure,  m_pnlProgress.edtStep2MaxPressure,
                                                m_pnlProgress.edtStep3MaxPressure,  m_pnlProgress.edtStep4MaxPressure,
                                                m_pnlProgress.edtStep5MaxPressure,  m_pnlProgress.edtStep6MaxPressure,
                                                m_pnlProgress.edtStep7MaxPressure,  m_pnlProgress.edtStep8MaxPressure,
                                                m_pnlProgress.edtStep9MaxPressure,  m_pnlProgress.edtStep10MaxPressure,
                                                m_pnlProgress.edtStep11MaxPressure, m_pnlProgress.edtStep12MaxPressure,
                                                m_pnlProgress.edtStep13MaxPressure, m_pnlProgress.edtStep14MaxPressure,
                                                m_pnlProgress.edtStep15MaxPressure, m_pnlProgress.edtStep16MaxPressure,
                                                m_pnlProgress.edtStep17MaxPressure, m_pnlProgress.edtStep18MaxPressure,
                                                m_pnlProgress.edtStep19MaxPressure, m_pnlProgress.edtStep20MaxPressure,
                                                m_pnlProgress.edtStep21MaxPressure, m_pnlProgress.edtStep22MaxPressure,
                                                m_pnlProgress.edtStep23MaxPressure, m_pnlProgress.edtStep24MaxPressure,
                                                m_pnlProgress.edtStep25MaxPressure, m_pnlProgress.edtStep26MaxPressure,
                                                m_pnlProgress.edtStep27MaxPressure, m_pnlProgress.edtStep28MaxPressure,
                                                m_pnlProgress.edtStep29MaxPressure, m_pnlProgress.edtStep30MaxPressure,
                                                m_pnlProgress.edtStep31MaxPressure, m_pnlProgress.edtStep32MaxPressure };



                    JSpinner [] m_StepsPE   = { m_pnlProgress.spnStep1MaxPressureExp,  m_pnlProgress.spnStep2MaxPressureExp,
                                                m_pnlProgress.spnStep3MaxPressureExp,  m_pnlProgress.spnStep4MaxPressureExp,
                                                m_pnlProgress.spnStep5MaxPressureExp,  m_pnlProgress.spnStep6MaxPressureExp,
                                                m_pnlProgress.spnStep7MaxPressureExp,  m_pnlProgress.spnStep8MaxPressureExp,
                                                m_pnlProgress.spnStep9MaxPressureExp,  m_pnlProgress.spnStep10MaxPressureExp,
                                                m_pnlProgress.spnStep11MaxPressureExp, m_pnlProgress.spnStep12MaxPressureExp,
                                                m_pnlProgress.spnStep13MaxPressureExp, m_pnlProgress.spnStep14MaxPressureExp,
                                                m_pnlProgress.spnStep15MaxPressureExp, m_pnlProgress.spnStep16MaxPressureExp,
                                                m_pnlProgress.spnStep17MaxPressureExp, m_pnlProgress.spnStep18MaxPressureExp,
                                                m_pnlProgress.spnStep19MaxPressureExp, m_pnlProgress.spnStep20MaxPressureExp,
                                                m_pnlProgress.spnStep21MaxPressureExp, m_pnlProgress.spnStep22MaxPressureExp,
                                                m_pnlProgress.spnStep23MaxPressureExp, m_pnlProgress.spnStep24MaxPressureExp,
                                                m_pnlProgress.spnStep25MaxPressureExp, m_pnlProgress.spnStep26MaxPressureExp,
                                                m_pnlProgress.spnStep27MaxPressureExp, m_pnlProgress.spnStep28MaxPressureExp,
                                                m_pnlProgress.spnStep29MaxPressureExp, m_pnlProgress.spnStep30MaxPressureExp,
                                                m_pnlProgress.spnStep31MaxPressureExp, m_pnlProgress.spnStep32MaxPressureExp };
                                                

                    Iterator it = m_lstProgram.iterator();
                    for( int i=0; i<m_lstProgram.size(); i++) {
                        TechProcessDegasationStepInfo step = ( TechProcessDegasationStepInfo) it.next();

                        if( m_StepsPM[i].getText().isEmpty() == false) {
                            try {
                                String str = m_StepsPM[i].getText();
                                str = str.replace( ',', '.');
                                double dbl = new Double( str);
                                Integer nExp = ( Integer) m_StepsPE[i].getValue();
                                dbl = dbl * Math.pow( 10, new Double( nExp));
                                step.SetMaxPressure(dbl);

                            } catch( NumberFormatException ex) {
                                logger.info( "NumberFormatException caught!", ex);
                            }
                        }                    

                        info.m_lstProgram.addLast( step);
                    }
                
                    m_dlgBigStopWatch.dispose();

                    theApp.SaveStepInfo( "162", info, true);
                    
                    theApp.SetCurrentStep( 181);
                    theApp.SetCurrentStepInProgress( false);

                    theApp.m_pMainWnd.m_pnlMain.m_pnlProcess.SetStates();
                    theApp.m_pMainWnd.m_pnlMain.m_pnlProcess.Reposition();
                    theApp.m_pMainWnd.m_pnlMain.ScrollActiveStepToCenter();
                    theApp.m_pMainWnd.m_pnlMain.setVisible( true);

                    theApp.m_pMainWnd.m_pnlActivation.setVisible( false);
                }
                else {
                    //надо переходить к след. этапу активации
                    TechProcessDegasationStepInfo info = ( TechProcessDegasationStepInfo) m_lstProgram.get( m_pnlProgress.m_nStep);
                    if( theApp.GetSettings().GetDebugShortenProgTimes() == true)
                        m_pnlProgress.m_nStepSecondsLeft = info.GetDuration() * 5;
                    else
                        m_pnlProgress.m_nStepSecondsLeft = info.GetDuration() * 60;
                    m_pnlProgress.m_nFlashSeconds = 4;
                    btnNext.setEnabled( false);
                }
            }
            else {
                if( m_pnlProgress.m_nStep == m_lstProgram.size()) {
                    //мы остановились на "добавить завершащие шаги"
                    //??
                }
                else {
                    TechProcessDegasationStepInfo info = ( TechProcessDegasationStepInfo) m_lstProgram.get( m_pnlProgress.m_nStep);
                    if( theApp.GetSettings().GetDebugShortenProgTimes() == true)
                        m_pnlProgress.m_nStepSecondsLeft = info.GetDuration() * 5;
                    else
                        m_pnlProgress.m_nStepSecondsLeft = info.GetDuration() * 60;
                    m_pnlProgress.m_nFlashSeconds = 4;
                    btnNext.setEnabled( false);
                }
            }
            
        }
        
        theApp.m_ReportGenerator.Generate();
    }//GEN-LAST:event_btnNextActionPerformed

    private void radInductorType1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radInductorType1ActionPerformed
        defineProgram();
        m_dlgBigStopWatch.lblInductor.setText( "ИНД1");
        /*m_dlgBigStopWatch.lblInductor.setLocation(
                m_dlgBigStopWatch.lblInductor.getX() - 5,
                m_dlgBigStopWatch.lblInductor.getY());*/
    }//GEN-LAST:event_radInductorType1ActionPerformed

    private void radInductorType2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radInductorType2ActionPerformed
        defineProgram();
        m_dlgBigStopWatch.lblInductor.setText( "ИНД2");
        /*m_dlgBigStopWatch.lblInductor.setLocation(
                m_dlgBigStopWatch.lblInductor.getX() + 5,
                m_dlgBigStopWatch.lblInductor.getY());*/
    }//GEN-LAST:event_radInductorType2ActionPerformed

    private void radGetterType1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radGetterType1ActionPerformed
        defineProgram();
    }//GEN-LAST:event_radGetterType1ActionPerformed

    private void radGetterType2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radGetterType2ActionPerformed
        defineProgram();
    }//GEN-LAST:event_radGetterType2ActionPerformed

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        /*
        if( m_lstProgram.size() <= 7)
            return;
        */
        
        int nMin = m_scrollBar.getMinimum();
        int nMax = m_scrollBar.getMaximum();
        int nPos = m_scrollBar.getValue();
        int nStep1 = m_scrollBar.getBlockIncrement();
        int nStep2 = m_scrollBar.getUnitIncrement();

        int nNextPos = nPos + evt.getWheelRotation() * nStep1;

        if( nNextPos < nMin) nNextPos = nMin;
        if( nNextPos > nMax) nNextPos = nMax;
        m_scrollBar.setValue( nNextPos);
    }//GEN-LAST:event_formMouseWheelMoved

    private void m_scrollBarAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_m_scrollBarAdjustmentValueChanged
        if( m_pnlProgress != null)
            m_pnlProgress.setBounds( 2, 2 - m_scrollBar.getValue(), 475, 269 + m_scrollBar.getValue());
    }//GEN-LAST:event_m_scrollBarAdjustmentValueChanged

    public void defineProgram() {
        int nProgramType = 0;
        
        if( theApp.GetProcessedDeviceType() == HVV_Admin4Constants.DEVICE_SMALL) nProgramType += 100;
        else if( theApp.GetProcessedDeviceType() == HVV_Admin4Constants.DEVICE_MEDIUM) nProgramType += 200;
        else nProgramType += 300;
        
        if( radGetterType1.isSelected()) nProgramType += 10;
        else nProgramType += 20;
        
        if( radInductorType1.isSelected()) nProgramType += 1;
        else nProgramType += 2;
        
        switch( nProgramType) {
            //SMALL
            case 111:   //small, get1, ind1    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
                
            case 112:   //small, get1, ind2    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
            
            case 121:   //small, get2, ind1    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
                
            case 122:   //small, get2, ind2    - yes
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  2));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  4));
                if( theApp.GetSettings().GetDebugShortenProgItems() == false) {
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 6));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 8));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 10));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 12));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 14));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 16));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 18));
                }
            break;
                
                
            //MEDIUM
            case 211:   //small, get1, ind1    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
                
            case 212:   //small, get1, ind2    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
            
            case 221:   //small, get2, ind1    - yes
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 3, 10));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 3, 15));
                if( theApp.GetSettings().GetDebugShortenProgItems() == false) {
                    m_lstProgram.add( new TechProcessDegasationStepInfo(  5, 20));
                    m_lstProgram.add( new TechProcessDegasationStepInfo(  5, 25));
                    m_lstProgram.add( new TechProcessDegasationStepInfo(  5, 30));
                    m_lstProgram.add( new TechProcessDegasationStepInfo(  5, 35));
                    //m_lstProgram.add( new TechProcessDegasationStepInfo(  5, 40));
                }
            break;
                
            case 222:   //small, get2, ind2    - yes
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  2));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  4));
                if( theApp.GetSettings().GetDebugShortenProgItems() == false) {
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 6));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 8));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 10));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 12));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 14));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 16));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 18));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 20));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 22));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 24));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 26));
                    m_lstProgram.add( new TechProcessDegasationStepInfo( 2, 28));
                }
            break;
                
                
            //BIG
            case 311:   //small, get1, ind1    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
                
            case 312:   //small, get1, ind2    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
            
            case 321:   //small, get2, ind1    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
                
            case 322:   //small, get2, ind2    - no
                m_lstProgram.clear();
                m_lstProgram.add( new TechProcessDegasationStepInfo( 1,  1));
                m_lstProgram.add( new TechProcessDegasationStepInfo( 2,  1));
            break;
        }
        
        /*
        if( m_lstProgram.size() >= 7) {
            m_scrollBar.setEnabled( true);
            m_scrollBar.setMaximum( 40 * (m_lstProgram.size() - 7) + 21);
        }
        else
            m_scrollBar.setEnabled( false);
        */
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnNext;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblGetterType;
    private javax.swing.JLabel lblInductorType;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JScrollBar m_scrollBar;
    private javax.swing.JPanel pnlProgress;
    public javax.swing.JRadioButton radGetterType1;
    public javax.swing.JRadioButton radGetterType2;
    public javax.swing.JRadioButton radInductorType1;
    public javax.swing.JRadioButton radInductorType2;
    // End of variables declaration//GEN-END:variables
}
